{"ast":null,"code":"const express = require('express');\nconst http = require('http');\nconst {\n  Server\n} = require('socket.io');\nconst cors = require('cors');\nconst app = express();\napp.use(cors());\nconst server = http.createServer(app);\nconst io = new Server(server, {\n  cors: {\n    origin: '*'\n  }\n});\nconst rooms = {};\nio.on('connection', socket => {\n  socket.on('joinRoom', ({\n    roomId,\n    name\n  }) => {\n    socket.join(roomId);\n    if (!rooms[roomId]) {\n      rooms[roomId] = {\n        players: {},\n        votes: {}\n      };\n    }\n    rooms[roomId].players[socket.id] = {\n      id: socket.id,\n      name\n    };\n    io.to(roomId).emit('players', Object.values(rooms[roomId].players));\n  });\n  socket.on('vote', ({\n    roomId,\n    card\n  }) => {\n    if (rooms[roomId]) {\n      rooms[roomId].votes[socket.id] = card;\n      io.to(roomId).emit('votes', rooms[roomId].votes);\n    }\n  });\n  socket.on('disconnect', () => {\n    for (const roomId in rooms) {\n      if (rooms[roomId].players[socket.id]) {\n        delete rooms[roomId].players[socket.id];\n        delete rooms[roomId].votes[socket.id];\n        io.to(roomId).emit('players', Object.values(rooms[roomId].players));\n        io.to(roomId).emit('votes', rooms[roomId].votes);\n      }\n    }\n  });\n});\nserver.listen(4000, () => console.log('Server running on port 4000'));","map":{"version":3,"names":["express","require","http","Server","cors","app","use","server","createServer","io","origin","rooms","on","socket","roomId","name","join","players","votes","id","to","emit","Object","values","card","listen","console","log"],"sources":["/home/diego-freire/Documentos/projetos_diego/Planning-Poker/planning-poker-app/planning-poker-front/src/index.js"],"sourcesContent":["const express = require('express');\nconst http = require('http');\nconst { Server } = require('socket.io');\nconst cors = require('cors');\n\nconst app = express();\napp.use(cors());\nconst server = http.createServer(app);\nconst io = new Server(server, {\n    cors: {\n        origin: '*',\n    },\n});\n\nconst rooms = {};\n\nio.on('connection', (socket) => {\n    socket.on('joinRoom', ({ roomId, name }) => {\n        socket.join(roomId);\n        if (!rooms[roomId]) {\n            rooms[roomId] = { players: {}, votes: {} };\n        }\n        rooms[roomId].players[socket.id] = { id: socket.id, name };\n\n        io.to(roomId).emit('players', Object.values(rooms[roomId].players));\n    });\n\n    socket.on('vote', ({ roomId, card }) => {\n        if (rooms[roomId]) {\n            rooms[roomId].votes[socket.id] = card;\n            io.to(roomId).emit('votes', rooms[roomId].votes);\n        }\n    });\n\n    socket.on('disconnect', () => {\n        for (const roomId in rooms) {\n            if (rooms[roomId].players[socket.id]) {\n                delete rooms[roomId].players[socket.id];\n                delete rooms[roomId].votes[socket.id];\n                io.to(roomId).emit('players', Object.values(rooms[roomId].players));\n                io.to(roomId).emit('votes', rooms[roomId].votes);\n            }\n        }\n    });\n});\n\nserver.listen(4000, () => console.log('Server running on port 4000'));\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEE;AAAO,CAAC,GAAGF,OAAO,CAAC,WAAW,CAAC;AACvC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrBK,GAAG,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC;AACf,MAAMG,MAAM,GAAGL,IAAI,CAACM,YAAY,CAACH,GAAG,CAAC;AACrC,MAAMI,EAAE,GAAG,IAAIN,MAAM,CAACI,MAAM,EAAE;EAC1BH,IAAI,EAAE;IACFM,MAAM,EAAE;EACZ;AACJ,CAAC,CAAC;AAEF,MAAMC,KAAK,GAAG,CAAC,CAAC;AAEhBF,EAAE,CAACG,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;EAC5BA,MAAM,CAACD,EAAE,CAAC,UAAU,EAAE,CAAC;IAAEE,MAAM;IAAEC;EAAK,CAAC,KAAK;IACxCF,MAAM,CAACG,IAAI,CAACF,MAAM,CAAC;IACnB,IAAI,CAACH,KAAK,CAACG,MAAM,CAAC,EAAE;MAChBH,KAAK,CAACG,MAAM,CAAC,GAAG;QAAEG,OAAO,EAAE,CAAC,CAAC;QAAEC,KAAK,EAAE,CAAC;MAAE,CAAC;IAC9C;IACAP,KAAK,CAACG,MAAM,CAAC,CAACG,OAAO,CAACJ,MAAM,CAACM,EAAE,CAAC,GAAG;MAAEA,EAAE,EAAEN,MAAM,CAACM,EAAE;MAAEJ;IAAK,CAAC;IAE1DN,EAAE,CAACW,EAAE,CAACN,MAAM,CAAC,CAACO,IAAI,CAAC,SAAS,EAAEC,MAAM,CAACC,MAAM,CAACZ,KAAK,CAACG,MAAM,CAAC,CAACG,OAAO,CAAC,CAAC;EACvE,CAAC,CAAC;EAEFJ,MAAM,CAACD,EAAE,CAAC,MAAM,EAAE,CAAC;IAAEE,MAAM;IAAEU;EAAK,CAAC,KAAK;IACpC,IAAIb,KAAK,CAACG,MAAM,CAAC,EAAE;MACfH,KAAK,CAACG,MAAM,CAAC,CAACI,KAAK,CAACL,MAAM,CAACM,EAAE,CAAC,GAAGK,IAAI;MACrCf,EAAE,CAACW,EAAE,CAACN,MAAM,CAAC,CAACO,IAAI,CAAC,OAAO,EAAEV,KAAK,CAACG,MAAM,CAAC,CAACI,KAAK,CAAC;IACpD;EACJ,CAAC,CAAC;EAEFL,MAAM,CAACD,EAAE,CAAC,YAAY,EAAE,MAAM;IAC1B,KAAK,MAAME,MAAM,IAAIH,KAAK,EAAE;MACxB,IAAIA,KAAK,CAACG,MAAM,CAAC,CAACG,OAAO,CAACJ,MAAM,CAACM,EAAE,CAAC,EAAE;QAClC,OAAOR,KAAK,CAACG,MAAM,CAAC,CAACG,OAAO,CAACJ,MAAM,CAACM,EAAE,CAAC;QACvC,OAAOR,KAAK,CAACG,MAAM,CAAC,CAACI,KAAK,CAACL,MAAM,CAACM,EAAE,CAAC;QACrCV,EAAE,CAACW,EAAE,CAACN,MAAM,CAAC,CAACO,IAAI,CAAC,SAAS,EAAEC,MAAM,CAACC,MAAM,CAACZ,KAAK,CAACG,MAAM,CAAC,CAACG,OAAO,CAAC,CAAC;QACnER,EAAE,CAACW,EAAE,CAACN,MAAM,CAAC,CAACO,IAAI,CAAC,OAAO,EAAEV,KAAK,CAACG,MAAM,CAAC,CAACI,KAAK,CAAC;MACpD;IACJ;EACJ,CAAC,CAAC;AACN,CAAC,CAAC;AAEFX,MAAM,CAACkB,MAAM,CAAC,IAAI,EAAE,MAAMC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}